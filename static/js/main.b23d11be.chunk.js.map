{"version":3,"sources":["components/NavBar.tsx","components/PageContent.tsx","components/Home.tsx","api.ts","components/Loader/Loader.tsx","types/Person.ts","components/PersonLink.tsx","components/PersonItem.tsx","utils/searchHelper.ts","components/SearchLink.tsx","types/SearchParams.ts","types/Genders.ts","components/PeopleFilters.tsx","types/SortKeys.ts","utils/getFilterdPeople.ts","components/PeopleList.tsx","utils/getSortedPeople.ts","components/NotFound.tsx","App.tsx","index.tsx"],"names":["NavBar","getLinkClass","isActive","classNames","className","role","to","PageContent","Home","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonSex","PersonLink","person","slug","sex","name","useSearchParams","params","toString","Female","PersonItem","selectedSlug","born","died","fatherName","motherName","father","mother","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","props","searchParams","search","SearchingParams","Genders","CENTURIES","PeopleFilters","setSearchParams","selectedSex","get","Sex","query","Query","selectedCenturies","getAll","Centuries","map","genderKey","type","placeholder","onChange","event","target","century","includes","centuries","filter","cent","length","SortKeys","getFilterdPeople","people","filteredPeople","lowerCaseQuery","toLowerCase","numberCentury","Number","year","Math","ceil","PeopleList","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useParams","personId","sort","Sort","order","Order","useEffect","data","find","getPreparedPeople","catch","finally","isPeopleOnServer","isNoPeopleOnServer","sortedPeople","sortBy","prepPeople","Born","Died","a","b","Name","localeCompare","getSortedPeople","sortKey","NotFound","App","path","element","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.b23d11be.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const NavBar = () => {\n  const getLinkClass = (\n    { isActive }: { isActive: boolean },\n  ) => classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { NavBar } from './NavBar';\n\nexport const PageContent = () => {\n  return (\n    <>\n      <NavBar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </>\n  );\n};\n","export const Home = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export interface Person {\n  name: string,\n  sex: string,\n  born: number,\n  died: number,\n  fatherName: string | null,\n  motherName: string | null,\n  slug: string,\n  mother?: Person,\n  father?: Person,\n}\n\nexport enum PersonSex {\n  Female = 'f',\n  Male = 'm',\n}\n","import { Link, useSearchParams } from 'react-router-dom';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Person, PersonSex } from '../types';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { slug, sex, name } = person;\n  const [params] = useSearchParams();\n\n  return (\n    <Link\n      to={`./${slug}?${params.toString()}`}\n      className={\n        classNames({\n          'has-text-danger': sex === PersonSex.Female,\n        })\n      }\n    >\n      {name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person;\n  selectedSlug: string;\n};\n\nconst NO_PARENT = '-';\n\nexport const PersonItem: React.FC<Props> = ({ person, selectedSlug }) => {\n  const {\n    born,\n    died,\n    fatherName,\n    motherName,\n    sex,\n    father,\n    mother,\n    slug,\n  } = person;\n\n  return (\n    <tr\n      className={\n        classNames({ 'has-background-warning': selectedSlug === slug })\n      }\n      data-cy=\"person\"\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || '-'\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || NO_PARENT\n        )}\n      </td>\n    </tr>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum SearchingParams {\n  Query = 'query',\n  Sex = 'sex',\n  Order = 'order',\n  Centuries = 'centuries',\n  Sort = 'sort',\n}\n","export enum Genders {\n  All = '',\n  Male = 'm',\n  Female = 'f',\n}\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { SearchingParams } from '../types/SearchParams';\nimport { Genders } from '../types/Genders';\nimport { getSearchWith } from '../utils/searchHelper';\n\nconst CENTURIES = ['16', '17', '18', '19'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const selectedSex = searchParams.get(SearchingParams.Sex) || '';\n  const query = searchParams.get(SearchingParams.Query) || '';\n  const selectedCenturies = searchParams\n    .getAll(SearchingParams.Centuries) || [];\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(\n      getSearchWith(searchParams, {\n        query: event.target.value || null,\n      }),\n    );\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(Genders).map(([key, value]) => {\n          const genderKey = key as keyof typeof Genders;\n\n          return (\n            <SearchLink\n              key={genderKey}\n              className={classNames(\n                {\n                  'is-active': selectedSex === value,\n                },\n              )}\n              params={{\n                sex: value === '' ? null : value,\n              }}\n            >\n              {genderKey}\n            </SearchLink>\n          );\n        })}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            value={query}\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames(\n                  'button',\n                  'mr-1',\n                  {\n                    'is-info': selectedCenturies.includes(century),\n                  },\n                )}\n                params={{\n                  centuries: selectedCenturies.includes(century)\n                    ? selectedCenturies.filter(cent => cent !== century)\n                    : [...selectedCenturies, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button',\n                'is-success',\n                {\n                  'is-outlined': selectedCenturies.length,\n                },\n              )}\n              params={{\n                centuries: [],\n              }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            query: null,\n            sex: null,\n            centuries: [],\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","export enum SortKeys {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import { Person } from '../types';\n\nconst getCentury = (year: number) => {\n  return Math.ceil(year / 100);\n};\n\nexport function getFilterdPeople(\n  people: Person[],\n  sex: string,\n  query: string,\n  centuries: string[],\n) {\n  let filteredPeople = [...people];\n\n  if (query) {\n    const lowerCaseQuery = query.toLowerCase();\n\n    filteredPeople = filteredPeople\n      .filter(({ name, motherName, fatherName }) => name\n        .toLowerCase()\n        .includes(lowerCaseQuery)\n      || motherName?.toLowerCase().includes(lowerCaseQuery)\n      || fatherName?.toLowerCase().includes(lowerCaseQuery));\n  }\n\n  if (sex) {\n    filteredPeople = filteredPeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    const numberCentury = centuries.map(Number);\n\n    filteredPeople = filteredPeople\n      .filter(({ born }) => numberCentury.includes(getCentury(born)));\n  }\n\n  return filteredPeople;\n}\n","import classNames from 'classnames';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { Loader } from './Loader';\nimport { PersonItem } from './PersonItem';\nimport { PeopleFilters } from './PeopleFilters';\nimport { SortKeys } from '../types/SortKeys';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../utils/searchHelper';\nimport { SearchingParams } from '../types/SearchParams';\nimport { getSortedPeople } from '../utils/getSortedPeople';\nimport { getFilterdPeople } from '../utils/getFilterdPeople';\n\nfunction getPreparedPeople(people: Person[]) {\n  return people.map(person => {\n    return {\n      ...person,\n      mother: people.find(mother => mother.name === person.motherName),\n      father: people.find(father => father.name === person.fatherName),\n    };\n  });\n}\n\nexport const PeopleList = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { personId = '' } = useParams();\n\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get(SearchingParams.Sort) || '';\n  const order = searchParams.get(SearchingParams.Order) || '';\n  const selectedSex = searchParams.get(SearchingParams.Sex) || '';\n  const query = searchParams.get(SearchingParams.Query) || '';\n  const selectedCenturies = searchParams\n    .getAll(SearchingParams.Centuries) || [];\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(data => {\n        setPeople(getPreparedPeople(data));\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const getSortParams = (sortKey: SortKeys): SearchParams => {\n    if (sort !== sortKey) {\n      return {\n        sort: sortKey,\n        order: null,\n      };\n    }\n\n    if (sort === sortKey && !order) {\n      return { order: 'desc' };\n    }\n\n    return {\n      sort: null,\n      order: null,\n    };\n  };\n\n  const isPeopleOnServer = !!people.length && !isError;\n  const isNoPeopleOnServer = !people.length && !isLoading;\n\n  const filteredPeople = getFilterdPeople(\n    people,\n    selectedSex,\n    query,\n    selectedCenturies,\n  );\n  const sortedPeople = getSortedPeople(\n    filteredPeople,\n    sort as SortKeys,\n    order ? -1 : 1,\n  );\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isNoPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isPeopleOnServer && (\n                <table\n                  data-cy=\"peopleTable\"\n                  className=\"\n                  table\n                  is-striped\n                  is-hoverable\n                  is-narrow\n                  is-fullwidth\"\n                >\n                  <thead>\n                    <tr>\n                      {Object.entries(SortKeys).map(([key, value]) => (\n                        <th key={key}>\n                          <span className=\"is-flex is-flex-wrap-nowrap\">\n                            {key}\n                            <SearchLink\n                              params={getSortParams(value)}\n                            >\n                              <span className=\"icon\">\n                                <i\n                                  className={classNames('fas', {\n                                    'fa-sort': sort !== value,\n                                    'fa-sort-up': sort === value && !order,\n                                    'fa-sort-down': sort === value,\n                                  })}\n                                />\n                              </span>\n                            </SearchLink>\n                          </span>\n                        </th>\n                      ))}\n                      <th>Mother</th>\n                      <th>Father</th>\n                    </tr>\n                  </thead>\n\n                  <tbody>\n                    {sortedPeople.map(person => (\n                      <PersonItem\n                        key={person.slug}\n                        person={person}\n                        selectedSlug={personId}\n                      />\n                    ))}\n                  </tbody>\n                </table>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\nimport { SortKeys } from '../types/SortKeys';\n\nexport function getSortedPeople(\n  people: Person[],\n  sortBy: SortKeys,\n  order: number,\n) {\n  const prepPeople = [...people];\n\n  switch (sortBy) {\n    case SortKeys.Born:\n    case SortKeys.Died: {\n      return prepPeople.sort((a, b) => (a[sortBy] - b[sortBy]) * order);\n    }\n\n    case SortKeys.Name:\n    case SortKeys.Sex:\n      return prepPeople.sort(\n        ((a, b) => a[sortBy].localeCompare(b[sortBy]) * order),\n      );\n\n    default:\n      return prepPeople;\n  }\n}\n","export const NotFound = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { PageContent } from './components/PageContent';\nimport { Home } from './components/Home';\nimport { PeopleList } from './components/PeopleList';\nimport { NotFound } from './components/NotFound';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Routes>\n      <Route path=\"/\" element={<PageContent />}>\n        <Route index element={<Home />} />\n        <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n        <Route path=\"people\" element={<PeopleList />}>\n          <Route path=\":personId\" />\n        </Route>\n        <Route path=\"*\" element={<NotFound />} />\n      </Route>\n    </Routes>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}