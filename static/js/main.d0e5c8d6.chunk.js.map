{"version":3,"sources":["components/NavBar.tsx","components/PageContent.tsx","components/HomePage.tsx","api.ts","components/Loader/Loader.tsx","utils/searchHelper.ts","components/SearchLink.tsx","types/SearchParams.ts","types/Genders.ts","utils/constants.ts","utils/updateSelectedCenturies.ts","components/PeopleFilters.tsx","types/SortKeys.ts","utils/getFilterdPeople.ts","types/Person.ts","components/PersonLink.tsx","components/PersonItem.tsx","components/PeopleList.tsx","utils/getSortedPeople.ts","components/PeoplePage.tsx","utils/getPreparedPeople.ts","components/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["NavBar","getLinkClass","isActive","classNames","className","role","to","PageContent","HomePage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","SearchingParams","Genders","CENTURIES","updateSelectedCenturies","selectedCenturies","century","includes","filter","cent","PeopleFilters","setSearchParams","selectedSex","get","Sex","query","Query","getAll","Centuries","map","genderKey","sex","type","placeholder","onChange","event","target","centuries","length","SortKeys","includesIgnoreCase","str","toLowerCase","getFilterdPeople","people","filteredPeople","lowerCaseQuery","name","motherName","fatherName","person","numberCentury","Number","year","born","Math","ceil","PersonSex","PersonLink","slug","Female","PersonItem","selectedSlug","died","father","mother","PeopleList","useParams","personId","sort","Sort","order","Order","sortedPeople","sortBy","prepPeople","Born","Died","a","b","Name","localeCompare","getSortedPeople","sortKey","isSortEqualValue","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","data","find","getPreparedPeople","catch","finally","isPeopleOnServer","isNoPeopleOnServer","NotFoundPage","App","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d0e5c8d6.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const NavBar = () => {\n  const getLinkClass = (\n    { isActive }: { isActive: boolean },\n  ) => classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { NavBar } from './NavBar';\n\nexport const PageContent = () => {\n  return (\n    <>\n      <NavBar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum SearchingParams {\n  Query = 'query',\n  Sex = 'sex',\n  Order = 'order',\n  Centuries = 'centuries',\n  Sort = 'sort',\n}\n","export enum Genders {\n  All = '',\n  Male = 'm',\n  Female = 'f',\n}\n","export const CENTURIES = ['16', '17', '18', '19', '20'];\nexport const NO_PARENT = '-';\nexport const YEARS_IN_CENTURY = 100;\n","export function updateSelectedCenturies(\n  selectedCenturies: string[],\n  century: string,\n) {\n  return selectedCenturies.includes(century)\n    ? selectedCenturies.filter(cent => cent !== century)\n    : [...selectedCenturies, century];\n}\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { SearchingParams } from '../types/SearchParams';\nimport { Genders } from '../types/Genders';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { CENTURIES } from '../utils/constants';\nimport { updateSelectedCenturies } from '../utils/updateSelectedCenturies';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const selectedSex = searchParams.get(SearchingParams.Sex) || '';\n  const query = searchParams.get(SearchingParams.Query) || '';\n  const selectedCenturies = searchParams\n    .getAll(SearchingParams.Centuries) || [];\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(\n      getSearchWith(searchParams, {\n        query: event.target.value || null,\n      }),\n    );\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(Genders).map(([key, value]) => {\n          const genderKey = key as keyof typeof Genders;\n\n          return (\n            <SearchLink\n              key={genderKey}\n              className={classNames(\n                {\n                  'is-active': selectedSex === value,\n                },\n              )}\n              params={{\n                sex: value || null,\n              }}\n            >\n              {genderKey}\n            </SearchLink>\n          );\n        })}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            value={query}\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames(\n                  'button',\n                  'mr-1',\n                  {\n                    'is-info': selectedCenturies.includes(century),\n                  },\n                )}\n                params={{\n                  centuries: updateSelectedCenturies(\n                    selectedCenturies,\n                    century,\n                  ),\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button',\n                'is-success',\n                {\n                  'is-outlined': selectedCenturies.length,\n                },\n              )}\n              params={{\n                centuries: [],\n              }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            query: null,\n            sex: null,\n            centuries: [],\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","export enum SortKeys {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import { Person } from '../types';\nimport { YEARS_IN_CENTURY } from './constants';\n\nconst getCentury = (year: number) => {\n  return Math.ceil(year / YEARS_IN_CENTURY);\n};\n\nfunction includesIgnoreCase(str: string | null, query : string) {\n  return str?.toLowerCase().includes(query.toLowerCase());\n}\n\nexport function getFilterdPeople(\n  people: Person[],\n  sex: string,\n  query: string,\n  centuries: string[],\n) {\n  let filteredPeople = [...people];\n\n  if (query) {\n    const lowerCaseQuery = query.toLowerCase();\n\n    filteredPeople = filteredPeople\n      .filter(({ name, motherName, fatherName }) => includesIgnoreCase(\n        name,\n        lowerCaseQuery,\n      )\n      || includesIgnoreCase(motherName, lowerCaseQuery)\n      || includesIgnoreCase(fatherName, lowerCaseQuery));\n  }\n\n  if (sex) {\n    filteredPeople = filteredPeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    const numberCentury = centuries.map(Number);\n\n    filteredPeople = filteredPeople\n      .filter(({ born }) => numberCentury.includes(getCentury(born)));\n  }\n\n  return filteredPeople;\n}\n","export interface Person {\n  name: string,\n  sex: string,\n  born: number,\n  died: number,\n  fatherName: string | null,\n  motherName: string | null,\n  slug: string,\n  mother?: Person,\n  father?: Person,\n}\n\nexport enum PersonSex {\n  Female = 'f',\n  Male = 'm',\n}\n","import { Link, useSearchParams } from 'react-router-dom';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Person, PersonSex } from '../types';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { slug, sex, name } = person;\n  const [params] = useSearchParams();\n\n  return (\n    <Link\n      to={`./${slug}?${params.toString()}`}\n      className={\n        classNames({\n          'has-text-danger': sex === PersonSex.Female,\n        })\n      }\n    >\n      {name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { NO_PARENT } from '../utils/constants';\n\ntype Props = {\n  person: Person;\n  selectedSlug: string;\n};\n\nexport const PersonItem: React.FC<Props> = ({ person, selectedSlug }) => {\n  const {\n    born,\n    died,\n    fatherName,\n    motherName,\n    sex,\n    father,\n    mother,\n    slug,\n  } = person;\n\n  return (\n    <tr\n      className={\n        classNames({ 'has-background-warning': selectedSlug === slug })\n      }\n      data-cy=\"person\"\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || NO_PARENT\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || NO_PARENT\n        )}\n      </td>\n    </tr>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { SortKeys } from '../types/SortKeys';\nimport { getFilterdPeople } from '../utils/getFilterdPeople';\nimport { getSortedPeople } from '../utils/getSortedPeople';\nimport { SearchingParams } from '../types/SearchParams';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\nimport { PersonItem } from './PersonItem';\nimport { SearchParams } from '../utils/searchHelper';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleList:React.FC<Props> = ({ people }) => {\n  const { personId = '' } = useParams();\n\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get(SearchingParams.Sort) || '';\n  const order = searchParams.get(SearchingParams.Order) || '';\n  const selectedSex = searchParams.get(SearchingParams.Sex) || '';\n  const query = searchParams.get(SearchingParams.Query) || '';\n  const selectedCenturies = searchParams\n    .getAll(SearchingParams.Centuries) || [];\n\n  const getSortParams = (sortKey: SortKeys): SearchParams => {\n    if (sort !== sortKey) {\n      return {\n        sort: sortKey,\n        order: null,\n      };\n    }\n\n    if (!order) {\n      return { order: 'desc' };\n    }\n\n    return {\n      sort: null,\n      order: null,\n    };\n  };\n\n  const filteredPeople = getFilterdPeople(\n    people,\n    selectedSex,\n    query,\n    selectedCenturies,\n  );\n\n  const sortedPeople = getSortedPeople(\n    filteredPeople,\n    sort as SortKeys,\n    order ? -1 : 1,\n  );\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"\n      table\n      is-striped\n      is-hoverable\n      is-narrow\n      is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(SortKeys).map(([key, value]) => {\n            const isSortEqualValue = sort === value;\n\n            return (\n              <th key={key}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {key}\n                  <SearchLink\n                    params={getSortParams(value)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames('fas', {\n                          'fa-sort': !isSortEqualValue,\n                          'fa-sort-up': isSortEqualValue && !order,\n                          'fa-sort-down': isSortEqualValue,\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            );\n          })}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {sortedPeople.map(person => (\n          <PersonItem\n            key={person.slug}\n            person={person}\n            selectedSlug={personId}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from '../types';\nimport { SortKeys } from '../types/SortKeys';\n\nexport function getSortedPeople(\n  people: Person[],\n  sortBy: SortKeys,\n  order: number,\n) {\n  const prepPeople = [...people];\n\n  switch (sortBy) {\n    case SortKeys.Born:\n    case SortKeys.Died: {\n      return prepPeople.sort((a, b) => (a[sortBy] - b[sortBy]) * order);\n    }\n\n    case SortKeys.Name:\n    case SortKeys.Sex:\n      return prepPeople.sort(\n        ((a, b) => a[sortBy].localeCompare(b[sortBy]) * order),\n      );\n\n    default:\n      return prepPeople;\n  }\n}\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { Loader } from './Loader';\nimport { PeopleFilters } from './PeopleFilters';\nimport { getPreparedPeople } from '../utils/getPreparedPeople';\nimport { PeopleList } from './PeopleList';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(data => {\n        setPeople(getPreparedPeople(data));\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const isPeopleOnServer = !!people.length && !isError;\n  const isNoPeopleOnServer = !people.length && !isLoading;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {isPeopleOnServer && (\n              <PeopleFilters />\n            )}\n\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isNoPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isPeopleOnServer && (\n                <PeopleList people={people} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport function getPreparedPeople(people: Person[]) {\n  return people.map(person => {\n    return {\n      ...person,\n      mother: people.find(({ name }) => name === person.motherName),\n      father: people.find(({ name }) => name === person.fatherName),\n    };\n  });\n}\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { PageContent } from './components/PageContent';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Routes>\n      <Route path=\"/\" element={<PageContent />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\" element={<PeoplePage />}>\n          <Route path=\":personId\" />\n        </Route>\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}